//
// TasksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TasksAPI {
    /**
     Create a task
     
     - parameter task: (body) JSON with new Task 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTask(task: Task, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createTaskWithRequestBuilder(task: task).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create a task
     - POST /tasks
     - parameter task: (body) JSON with new Task 
     - returns: RequestBuilder<Void> 
     */
    open class func createTaskWithRequestBuilder(task: Task) -> RequestBuilder<Void> {
        let path = "/tasks"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: task)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     List all user's tasks
     
     - parameter page: (query) Number of requested page (optional, default to 1)
     - parameter per: (query) How many items to return at one time (max 100) (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTasks(page: Int? = nil, per: Int? = nil, completion: @escaping ((_ data: TaskPage?,_ error: Error?) -> Void)) {
        listTasksWithRequestBuilder(page: page, per: per).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List all user's tasks
     - GET /tasks
     - parameter page: (query) Number of requested page (optional, default to 1)
     - parameter per: (query) How many items to return at one time (max 100) (optional, default to 10)
     - returns: RequestBuilder<TaskPage> 
     */
    open class func listTasksWithRequestBuilder(page: Int? = nil, per: Int? = nil) -> RequestBuilder<TaskPage> {
        let path = "/tasks"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "per": per?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TaskPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a specific task
     
     - parameter taskId: (path) The id of the task to update 
     - parameter task: (body) JSON with updated Task 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showTaskById(taskId: Int, task: Task, completion: @escaping ((_ data: Task?,_ error: Error?) -> Void)) {
        showTaskByIdWithRequestBuilder(taskId: taskId, task: task).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update a specific task
     - PATCH /tasks/{taskId}
     - parameter taskId: (path) The id of the task to update 
     - parameter task: (body) JSON with updated Task 
     - returns: RequestBuilder<Task> 
     */
    open class func showTaskByIdWithRequestBuilder(taskId: Int, task: Task) -> RequestBuilder<Task> {
        var path = "/tasks/{taskId}"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{taskId}", with: taskIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: task)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Task>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
